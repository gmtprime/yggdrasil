defmodule Yggdrasil.Adapter.Elixir do
  @doc """
  Default Elixir adapter. Events are generated by notifying the adapter server.
  """
  use YProcess, backend: Yggdrasil.Backend 
  use Yggdrasil.Adapter, module: YProcess

  alias Yggdrasil.Adapter
  alias Yggdrasil.Publisher

  ##
  # State for the Elixir adapter. 
  defstruct [:channel, :publisher]
  alias __MODULE__, as: State

  ##
  # Generates the `channel` name.
  @doc false
  def get_channel_name(channel) do
    {:elixir_adapter, channel}
  end

  @doc false
  def init(%Adapter{publisher: publisher, channel: channel}) do
    adapter_channel = get_channel_name(channel)
    state = %State{channel: adapter_channel, publisher: publisher}
    {:join, [adapter_channel], state}
  end

  @doc false
  def handle_event(
    channel,
    message,
    %State{channel: channel, publisher: publisher} = state
  ) do 
    Publisher.sync_notify(publisher, channel, message)
    {:noreply, state}
  end
  def handle_event(_, _, state) do
   {:noreply, state}
  end
end
